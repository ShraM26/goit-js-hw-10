{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nfunction elemDOM(selector) {\n  return document.querySelector(selector);\n};\nconst btnStart = elemDOM('[data-start]');\nconst daysEL = elemDOM('[data-days]');\nconst hoursEL = elemDOM('[data-hours]');\nconst minutesEL = elemDOM('[data-minutes]');\nconst secondsEL = elemDOM('[data-seconds]');\nconst datetimeInpEL = elemDOM('#datetime-picker');\n\nbtnStart.disabled = true;\nlet userSelectedDate;\n // Опции для flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    handleDateSelection(selectedDates);\n  }\n}\n// Инициализация flatpickr\nflatpickr(datetimeInpEL, options);\n// Обробка вибору дати\nfunction handleDateSelection(selectedDates) {\n  const selectedDate = selectedDates[0];\n\n  if (selectedDate > new Date()) {\n    btnStart.disabled = false;\n    userSelectedDate = selectedDate;\n  } else {\n    showError(\"Please choose a date in the future\");\n    btnStart.disabled = true;\n  }\n}\n// Показ помилки через ізіТост\nfunction showError(message) {\n  iziToast.error({\n    title: 'Error',\n    titleColor: '#fff',\n    message: message,\n    messageColor: '#fff',\n    backgroundColor: '#ef4040',\n    position: 'topRight',\n    iconColor: '#fff',\n    theme: 'dark',\n  });\n}\n// Начало отсчета таймера при нажатии на кнопку Start\nbtnStart.addEventListener('click', activateTimer);\n\nfunction activateTimer () {\n  btnStart.disabled = true;\n  datetimeInpEL.disabled = true;\n// получаем количиство милисекунд\n  const countdownDateMs = new Date(userSelectedDate).getTime();\n//  обчесляем раз на секунду\n  const timerInterval = setInterval(updateTimer, 1000);\n  // Функция обновления таймера\n  function updateTimer() {\n    // получаем текущее количество милисекунд\n    const currentTimeMs = new Date().getTime();\n    // отнимаем выбраное количиство  полюзувателем от текущего\n    const differenceMs = countdownDateMs - currentTimeMs;\n// останавливаем таймер когда кончится время и обчесление раз в секунду \n    if (differenceMs <= 0) {\n      clearInterval(timerInterval);\n      // Действия при завершении отсчета\n     for (const item of elementsDOM) {\n         item.elDOM.textContent = item.value;\n       }\n        datetimeInpEL.disabled = false;\n        return;\n    }\n    const time = convertMs(differenceMs);\n    // Отображение времени в интерфейсе с добавлением ведущих нулей\n       for (const [index, item] of elementsDOM.entries()) {\n             item.elDOM.textContent = addLeadingZero(time[Object.keys(time)[index]]);\n         }\n  }\n}\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\nconst elementsDOM = [\n  { elDOM: daysEL, value: '00' },\n  { elDOM: hoursEL, value: '00' },\n  { elDOM: minutesEL, value: '00' },\n  { elDOM: secondsEL, value: '00' }\n];\n\n\n// Действия при завершении отсчета легкий вариант\n  // daysEL.textContent = '00';\n  //     hoursEL.textContent = '00';\n  //     minutesEL.textContent = '00';\n  //     secondsEL.textContent = '00';\n  //     datetimeInpEL.disabled = false;\n  //     return;\n // Отображение времени в интерфейсе с добавлением ведущих нулей легкий вариант\n    // daysEL.textContent = addLeadingZero(time.days);\n    // hoursEL.textContent = addLeadingZero(time.hours);\n    // minutesEL.textContent = addLeadingZero(time.minutes);\n    // secondsEL.textContent = addLeadingZero(time.seconds);\n\n// ===============================================================\n    // Функция для создания элемента DOM\n// function elemDOM(selector) {\n//   return document.querySelector(selector);\n// }\n\n// // Значения элементов DOM\n// const elementsDOM = [\n//   { elDOM: '[data-days]', value: '00' },\n//   { elDOM: '[data-hours]', value: '00' },\n//   { elDOM: '[data-minutes]', value: '00' },\n//   { elDOM: '[data-seconds]', value: '00' }\n// ];\n\n// // Получение элементов DOM\n// const elements = elementsDOM.map(item => ({\n//   elDOM: elemDOM(item.elDOM),\n//   value: item.value\n// }));\n\n// // Настройки для flatpickr\n// const options = {\n//   enableTime: true,\n//   time_24hr: true,\n//   defaultDate: new Date(),\n//   minuteIncrement: 1,\n//   onClose(selectedDates) {\n//     handleDateSelection(selectedDates);\n//   }\n// };\n\n// // Инициализация flatpickr\n// const datetimeInpEL = elemDOM('#datetime-picker');\n// flatpickr(datetimeInpEL, options);\n\n// // Обработка выбора даты\n// let userSelectedDate;\n// function handleDateSelection(selectedDates) {\n//   const selectedDate = selectedDates[0];\n//   if (selectedDate > new Date()) {\n//     btnStart.disabled = false;\n//     userSelectedDate = selectedDate;\n//   } else {\n//     showError(\"Please choose a date in the future\");\n//     btnStart.disabled = true;\n//   }\n// }\n\n// // Показ сообщения об ошибке\n// function showError(message) {\n//   iziToast.error({\n//     title: 'Error',\n//     titleColor: '#fff',\n//     message: message,\n//     messageColor: '#fff',\n//     backgroundColor: '#ef4040',\n//     position: 'topRight',\n//     iconColor: '#fff',\n//     theme: 'dark',\n//   });\n// }\n\n// // Обработчик кнопки Start\n// const btnStart = elemDOM('[data-start]');\n// btnStart.addEventListener('click', activateTimer);\n\n// function activateTimer() {\n//   btnStart.disabled = true;\n//   datetimeInpEL.disabled = true;\n\n//   const countdownDateMs = new Date(userSelectedDate).getTime();\n//   const timerInterval = setInterval(updateTimer, 1000);\n\n//   function updateTimer() {\n//     const currentTimeMs = new Date().getTime();\n//     const differenceMs = countdownDateMs - currentTimeMs;\n\n//     if (differenceMs <= 0) {\n//       clearInterval(timerInterval);\n//       elements.forEach(item => item.elDOM.textContent = item.value);\n//       datetimeInpEL.disabled = false;\n//       return;\n//     }\n\n//     const time = convertMs(differenceMs);\n//     elements.forEach((item, index) => {\n//       item.elDOM.textContent = addLeadingZero(time[Object.keys(time)[index]]);\n//     });\n//   }\n// }\n\n// // Добавление ведущих нулей\n// function addLeadingZero(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// // Функция для конвертации миллисекунд в дни, часы, минуты и секунды\n// function convertMs(ms) {\n//   const second = 1000;\n//   const minute = second * 60;\n//   const hour = minute * 60;\n//   const day = hour * 24;\n\n//   const days = Math.floor(ms / day);\n//   const hours = Math.floor((ms % day) / hour);\n//   const minutes = Math.floor(((ms % day) % hour) / minute);\n//   const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//   return { days, hours, minutes, seconds };\n// }"],"names":["elemDOM","selector","btnStart","daysEL","hoursEL","minutesEL","secondsEL","datetimeInpEL","userSelectedDate","options","selectedDates","handleDateSelection","flatpickr","selectedDate","showError","message","iziToast","activateTimer","countdownDateMs","timerInterval","updateTimer","currentTimeMs","differenceMs","item","elementsDOM","time","convertMs","index","addLeadingZero","value","ms","days","hours","minutes","seconds"],"mappings":"iyBAMA,SAASA,EAAQC,EAAU,CACzB,OAAO,SAAS,cAAcA,CAAQ,CACxC,CACA,MAAMC,EAAWF,EAAQ,cAAc,EACjCG,EAASH,EAAQ,aAAa,EAC9BI,EAAUJ,EAAQ,cAAc,EAChCK,EAAYL,EAAQ,gBAAgB,EACpCM,EAAYN,EAAQ,gBAAgB,EACpCO,EAAgBP,EAAQ,kBAAkB,EAEhDE,EAAS,SAAW,GACpB,IAAIM,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBC,EAAoBD,CAAa,CAClC,CACH,EAEAE,EAAUL,EAAeE,CAAO,EAEhC,SAASE,EAAoBD,EAAe,CAC1C,MAAMG,EAAeH,EAAc,CAAC,EAEhCG,EAAe,IAAI,MACrBX,EAAS,SAAW,GACpBM,EAAmBK,IAEnBC,EAAU,oCAAoC,EAC9CZ,EAAS,SAAW,GAExB,CAEA,SAASY,EAAUC,EAAS,CAC1BC,EAAS,MAAM,CACb,MAAO,QACP,WAAY,OACZ,QAASD,EACT,aAAc,OACd,gBAAiB,UACjB,SAAU,WACV,UAAW,OACX,MAAO,MACX,CAAG,CACH,CAEAb,EAAS,iBAAiB,QAASe,CAAa,EAEhD,SAASA,GAAiB,CACxBf,EAAS,SAAW,GACpBK,EAAc,SAAW,GAEzB,MAAMW,EAAkB,IAAI,KAAKV,CAAgB,EAAE,QAAO,EAEpDW,EAAgB,YAAYC,EAAa,GAAI,EAEnD,SAASA,GAAc,CAErB,MAAMC,EAAgB,IAAI,KAAM,EAAC,QAAO,EAElCC,EAAeJ,EAAkBG,EAEvC,GAAIC,GAAgB,EAAG,CACrB,cAAcH,CAAa,EAE5B,UAAWI,KAAQC,EACfD,EAAK,MAAM,YAAcA,EAAK,MAE/BhB,EAAc,SAAW,GACzB,MACH,CACD,MAAMkB,EAAOC,EAAUJ,CAAY,EAEhC,SAAW,CAACK,EAAOJ,CAAI,IAAKC,EAAY,QAAO,EACzCD,EAAK,MAAM,YAAcK,EAAeH,EAAK,OAAO,KAAKA,CAAI,EAAEE,CAAK,CAAC,CAAC,CAEhF,CACH,CACA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CACA,SAASH,EAAUI,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CACA,MAAMV,EAAc,CAClB,CAAE,MAAOrB,EAAQ,MAAO,IAAM,EAC9B,CAAE,MAAOC,EAAS,MAAO,IAAM,EAC/B,CAAE,MAAOC,EAAW,MAAO,IAAM,EACjC,CAAE,MAAOC,EAAW,MAAO,IAAM,CACnC"}